using System.Collections;
using System.Collections.Generic;
using System.IO;
using Niantic.ARDK.Networking;
using Niantic.ARDK.Networking.MultipeerNetworkingEventArgs;
using Niantic.ARDK.Utilities.BinarySerialization;
using Niantic.ARDK.Utilities.BinarySerialization.ItemSerializers;
using UnityEngine;

//This script based on MessagingManager.cs from "~/Assets/ARDKExamples/Pong/MessagingManager.cs"
public class MessagingManager : MonoBehaviour
{

    [HideInInspector]
    public IMultipeerNetworking _networking;
    private readonly MemoryStream _builderMemoryStream = new MemoryStream(24);

    // Enums for the various message types
    public enum MessageType : uint
    {
        GameState,
        PlayerScore,
    }


    [HideInInspector]
    public GameControl gc;

    #region Init ------------------------------------------------------------------------------------------------------------

    private void Awake()
    {
        MultipeerNetworkingFactory.NetworkingInitialized += OnNetworkingInitialized;
        gc = GameVal.gc;
    }
    private void OnNetworkingInitialized(AnyMultipeerNetworkingInitializedArgs args)
    {
        //Debug.Log("OnNetworkingInitialized from " + gameObject.name);
        _networking = args.Networking;

        _networking.PeerDataReceived += OnDidReceiveDataFromPeer;
    }


    // Remove callback from networking object on destruction
    internal void Destroy()
    {
        _networking.PeerDataReceived -= OnDidReceiveDataFromPeer;
    }


    #endregion

    #region Send ------------------------------------------------------------------------------------------------------------

    internal void BroadcastString(uint id, string message, TransportType tt)
    {
        //Debug.Log("BroadcastString : " + (MessageType)id + " | " + message);
        _networking.BroadcastData(id, SerializeString(message), tt);
    }

    internal void BroadcastPosition(uint id, Vector3 position)
    {
        //Debug.Log("BroadcastPosition");
        _networking.BroadcastData(id, SerializeVector3(position), TransportType.UnreliableUnordered);
    }

    internal void BroadcastRotation(uint id, Quaternion quaternion)
    {
        //Debug.Log("BroadcastRotation");
        _networking.BroadcastData(id, SerializeQuaternionSerializer(quaternion), TransportType.UnreliableUnordered);
    }


    // Helper to serialize a String into a byte[] to be passed over the network
    private byte[] SerializeString(string s)
    {
        _builderMemoryStream.Position = 0;
        _builderMemoryStream.SetLength(0);

        using (var binarySerializer = new BinarySerializer(_builderMemoryStream))
            StringSerializer.Instance.Serialize(binarySerializer, s);

        return _builderMemoryStream.ToArray();
    }



    // Helper to serialize a Vector3 into a byte[] to be passed over the network
    private byte[] SerializeVector3(Vector3 vector)
    {
        _builderMemoryStream.Position = 0;
        _builderMemoryStream.SetLength(0);

        using (var binarySerializer = new BinarySerializer(_builderMemoryStream))
            Vector3Serializer.Instance.Serialize(binarySerializer, vector);

        return _builderMemoryStream.ToArray();
    }



    private byte[] SerializeQuaternionSerializer(Quaternion quaternion)
    {
        _builderMemoryStream.Position = 0;
        _builderMemoryStream.SetLength(0);

        using (var binarySerializer = new BinarySerializer(_builderMemoryStream))
            QuaternionSerializer.Instance.Serialize(binarySerializer, quaternion);

        return _builderMemoryStream.ToArray();
    }


    #endregion




    #region Receive ------------------------------------------------------------------------------------------------------------

    private void OnDidReceiveDataFromPeer(PeerDataReceivedArgs args)
    {
        var data = args.CopyData();
        IPeer _peer = args.Peer;
        MessageType _tag = (MessageType)args.Tag;

        string _receivedString = DeserializeString(data);

        //Debug.Log("OnDidReceiveDataFromPeer");
        //Debug.Log("Received message with tag: " + _tag + " from " + _peer.Identifier + " and msg is : " + DeserializeString(data));



        switch (_tag)
        {
            case MessageType.GameState:
                if (_networking.Host.Identifier != _networking.Self.Identifier)
                {
                    switch (_receivedString)
                    {
                        case "Start":
                            Debug.Log("Game Start");
                            GameVal.gc.ClientStartGame();
                            break;
                        case "Restart":
                            Debug.Log("Restart");
                            GameVal.gc.GameRestart();
                            break;
                        case "Reset":
                            Debug.Log("Reset");
                            GameVal.gc.GameReset();
                            break;
                    }
                }
                break;

            case MessageType.PlayerScore:

                break;

        }


    }

    private string DeserializeString(byte[] data)
    {
        using (var readingStream = new MemoryStream(data))
        using (var binaryDeserializer = new BinaryDeserializer(readingStream))
            return StringSerializer.Instance.Deserialize(binaryDeserializer);
    }

    // Helper to deserialize a byte[] received from the network into a Vector3
    private Vector3 DeserializeVector3(byte[] data)
    {
        using (var readingStream = new MemoryStream(data))
        using (var binaryDeserializer = new BinaryDeserializer(readingStream))
            return Vector3Serializer.Instance.Deserialize(binaryDeserializer);
    }

    private Quaternion DeserializeQuaternion(byte[] data)
    {
        using (var readingStream = new MemoryStream(data))
        using (var binaryDeserializer = new BinaryDeserializer(readingStream))
            return QuaternionSerializer.Instance.Deserialize(binaryDeserializer);
    }



    #endregion




}
